h2o.connect(ip = "141.223.82.60")
#Next, download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
# The following two commands remove any previously installed H2O packages for R.
if ("package:h2o" %in% search()) { detach("package:h2o", unload=TRUE) }
if ("h2o" %in% rownames(installed.packages())) { remove.packages("h2o") }
#Next, download packages that H2O depends on.
pkgs <- c("RCurl","jsonlite")
for (pkg in pkgs) {
if (! (pkg %in% rownames(installed.packages()))) { install.packages(pkg) }
}
#Download and install the H2O package for R.
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/latest_stable_R")))
#기본 경로 설정
setwd("C:/Users/jbhong/Desktop/AD/third") #윈도우의 경우 내문서 폴더 (Documents)가 default
getwd()
library(h2o)
# 원격 H2O서버에 접속하는 경우 (둘 중 하나 선택)
h2o.connect(ip = "141.223.124.28", port = 54321)
library(tidyverse) #데이터 만지고 변환하는 패키지
# csv 파일을 읽어들여 R의 dataframe으로 저장
data_0909_stress <- read_csv("0908_data_v2_processed_for_training.csv")
#output이 되는 데이터 포맷 변환
#아래의 경우 host, cpu, mem, io, label은 항목 데이터로, clock은 시간값 (unixtime)으로 변환 (코드에 없는 나머지 column은 그대로 숫자)
data_0909_stress <- data_0909_stress %>%
mutate(
SLA_label = factor(SLA_label),
total_label = factor(total_label),
rcl_label = factor(rcl_label),
rcl_label_total = factor(rcl_label_total),
stress_label = factor(stress_label)
)
data_0909_stress.h2o <-  h2o.splitFrame(
data = as.h2o(data_0909_stress),
ratios = 0.75,
destination_frames = c("data_0909_stress_training", "data_0909_stress_test"),
seed=12220
)
# csv 파일을 읽어들여 R의 dataframe으로 저장
data_0911_test <- read_csv("0911_data_processed_for_testing.csv")
# csv 파일을 읽어들여 R의 dataframe으로 저장
data_0911_test <- read_csv("0911_testset_processed_for_testing.csv")
#output이 되는 데이터 포맷 변환
#아래의 경우 host, cpu, mem, io, label은 항목 데이터로, clock은 시간값 (unixtime)으로 변환 (코드에 없는 나머지 column은 그대로 숫자)
data_0911_test <- data_0911_test %>%
mutate(
SLA_label = factor(SLA_label),
total_label = factor(total_label),
rcl_label = factor(rcl_label),
rcl_label_total = factor(rcl_label_total),
stress_label = factor(stress_label)
)
data_0911_test.h2o <-  h2o.splitFrame(
data = as.h2o(data_0911_test),
ratios = 0.5,
destination_frames = c("data_0911_test_training", "data_0911_test_validation"),
seed=12220
)
#기본 경로 설정
setwd("C:/Users/jbhong/Desktop/AD/third") #윈도우의 경우 내문서 폴더 (Documents)가 default
getwd()
library(h2o)
# 원격 H2O서버에 접속하는 경우 (둘 중 하나 선택)
h2o.connect(ip = "141.223.124.28", port = 54321)
library(tidyverse) #데이터 만지고 변환하는 패키지
# csv 파일을 읽어들여 R의 dataframe으로 저장
data_new_rcl <- read_csv("0908_data_v2_new_rcl.csv")
#output이 되는 데이터 포맷 변환
#아래의 경우 host, cpu, mem, io, label은 항목 데이터로, clock은 시간값 (unixtime)으로 변환 (코드에 없는 나머지 column은 그대로 숫자)
data_new_rcl <- data_new_rcl %>%
mutate(
rcl_label = factor(rcl_label)
)
data_new_rcl.h2o <-  h2o.splitFrame(
data = as.h2o(data_new_rcl),
ratios = 0.5,
destination_frames = c("data_new_rcl_training", "data_new_rcl_validation"),
seed=12220
)
# csv 파일을 읽어들여 R의 dataframe으로 저장
data_new_rcl_test <- read_csv("0911_data_new_rcl_test.csv")
# csv 파일을 읽어들여 R의 dataframe으로 저장
data_new_rcl_test <- read_csv("0911_data_new_rcl_test.csv")
#output이 되는 데이터 포맷 변환
#아래의 경우 host, cpu, mem, io, label은 항목 데이터로, clock은 시간값 (unixtime)으로 변환 (코드에 없는 나머지 column은 그대로 숫자)
data_new_rcl_test <- data_new_rcl_test %>%
mutate(
rcl_label = factor(rcl_label)
)
data_new_rcl_test.h2o <-  h2o.splitFrame(
data = as.h2o(data_new_rcl_test),
ratios = 0.5,
destination_frames = c("data_new_rcl_test_training", "data_new_rcl_test_validation"),
seed=12220
)
View(data_0911_test)
View(data_0911_test.h2o)
View(data_0911_test)
# set default path
setwd("C:/Users/jbhong/Documents/GitHub/ni-anomaly-detection-public")
getwd()
library(h2o)
# connect the h2o platform in AI Node
h2o.connect(ip = "141.223.124.28", port = 54321)
# read csv file
data_0911_test <- read_csv("data/test_dataset.csv")
# read csv file
test_dataset <- read_csv("data/test_dataset.csv")
# convert categorical metric
test_dataset <- test_dataset %>%
mutate(
SLA_label = factor(SLA_label)
)
# upload to h2o platform
test_dataset.h2o <-  h2o.splitFrame(
data = as.h2o(test_dataset),
ratios = 0.5,
destination_frames = c("test_dataset_part1", "test_dataset_part2"),
seed=12220
)
