# coding: utf-8

"""
    NI Project Anomaly Detection Module

    NI VNF Anomaly Detection Module for the NI Project.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openapi_client.models.network_port import NetworkPort

class VNFInstance(BaseModel):
    """
    VNFInstance
    """
    id: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    status: Optional[StrictStr] = Field(None, description="state of VNF VM. (ACTIVE, SHUTOFF, ERROR, etc.)")
    flavor_id: Optional[StrictStr] = None
    node_id: Optional[StrictStr] = None
    ports: Optional[conlist(NetworkPort)] = None
    __properties = ["id", "name", "status", "flavor_id", "node_id", "ports"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VNFInstance:
        """Create an instance of VNFInstance from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in ports (list)
        _items = []
        if self.ports:
            for _item in self.ports:
                if _item:
                    _items.append(_item.to_dict())
            _dict['ports'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VNFInstance:
        """Create an instance of VNFInstance from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VNFInstance.parse_obj(obj)

        _obj = VNFInstance.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "status": obj.get("status"),
            "flavor_id": obj.get("flavor_id"),
            "node_id": obj.get("node_id"),
            "ports": [NetworkPort.from_dict(_item) for _item in obj.get("ports")] if obj.get("ports") is not None else None
        })
        return _obj


